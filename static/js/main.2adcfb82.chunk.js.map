{"version":3,"sources":["components/Dijkstra/styles.ts","components/Dijkstra/algorithm.ts","components/Dijkstra/Dijkstra.tsx","components/Vertices/styles.ts","components/Vertices/Vertex.tsx","components/Vertices/Vertices.tsx","utils.ts","components/Edges/styles.ts","components/Edges/Edge.tsx","components/Edges/Edges.tsx","components/Selector/styles.ts","components/Selector/Selector.tsx","components/Controls/styles.ts","components/Controls/Controls.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Container","styled","div","dijkstra","vertices","edges","vertexNames","Object","keys","_dijkstra","pathMap","at","visited","length","neighbours","filter","e","from","indexOf","to","reduce","acc","neighbourKey","Math","sqrt","pow","x","y","d","fullDistance","delta","name","Infinity","DijkstraContext","React","createContext","getLeft","getTop","DijkstraProvider","children","verticesConfig","edgesConfig","containerRef","useRef","offsetLeft","offsetTop","toAtom","atom","key","default","k","map","paths","selector","get","vertexPositions","pathAtom","getPath","accumulator","nextStep","Provider","value","current","ref","Node","props","fromSelected","css","toSelected","Vertex","vAtom","useContext","lastPosition","useState","isDragging","setIsDragging","useRecoilState","vectorState","setVectorState","useRecoilValue","getMousePosition","clientX","clientY","style","left","top","onMouseDown","onMouseUp","onMouseMove","onClick","stopPropagation","Vertices","greater","lesser","Line","color","active","size","backward","Edge","pred1","pred2","fromValue","toValue","path","includes","width","height","Edges","i","Button","button","selected","Selector","label","options","onChange","o","id","text","Wrapper","section","Text","p","Controls","setTo","toOptions","A","B","C","D","E","F","App","className","Dijkstra","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2adcfb82.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst WIDTH = 1000;\nconst HEIGHT = 800;\n\nexport const Container = styled.div`\n  border: 1px solid black;\n  box-sizing: border-box;\n  height: ${HEIGHT}px;\n  margin: 0 auto;\n  overflow: hidden;\n  padding: 20px;\n  position: relative;\n  text-align: left;\n  width:  ${WIDTH}px;\n`;\n","import { PathMap } from '../../types';\n\ntype Position = { x: number, y: number };\n\ntype Vertices = {\n  [name: string]: Position;\n};\n\nexport const getDistance = (from: Position, to: Position): number =>\n  Math.sqrt(Math.pow(to.x - from.x, 2) + Math.pow(to.y - from.y, 2));\n\nexport const dijkstra = (\n  vertices: Vertices,\n  edges:    Array<{ from: string, to: string }>\n): PathMap => {\n  const vertexNames = Object.keys(vertices);\n\n  const _dijkstra = (\n    pathMap: PathMap,\n    at: string,\n    visited: Array<string>\n  ): PathMap => {\n    if (visited.length >= vertexNames.length) {\n      return pathMap;\n    }\n\n    const neighbours =\n      edges\n        .filter(e => {\n          if (e.from === at && visited.indexOf(e.to) < 0) {\n            return true;\n          }\n\n          if (e.to === at && visited.indexOf(e.from) < 0) {\n            return true;\n          }\n\n          return false;\n        })\n        .reduce((acc, e) => {\n          const neighbourKey = (e.to === at ? e.from : e.to);\n\n          return {\n            ...acc,\n            [neighbourKey]: getDistance(vertices[at], vertices[neighbourKey])\n          };\n        }, {});\n\n    const newMap =\n      Object.keys(neighbours)\n        .reduce((acc, d) => {\n          const fullDistance = acc[at][0] + neighbours[d];\n\n          if (!acc[d] || fullDistance < acc[d][0]) {\n            return ({\n              ...acc,\n              [d]: [fullDistance, at]\n            } as PathMap);\n          }\n\n          return acc;\n        }, pathMap);\n\n    const leastDistant =\n      Object.keys(neighbours)\n        .reduce((acc, d) => (\n          neighbours[d] < acc.delta ? { name: d, delta: neighbours[d] } : acc\n        ), { name: '', delta: Infinity });\n\n    return _dijkstra(newMap, leastDistant.name, [ ...visited, at ]);\n  };\n\n  return _dijkstra(\n    { [vertexNames[0]]: [0, ''] },\n    vertexNames[0],\n    []\n  );\n};\n\nexport const getPath = (\n  pathMap:     PathMap,\n  to:          string,\n  accumulator: string = ''\n): string => {\n  if (to === '')          return accumulator;\n  if (accumulator === '') return getPath(pathMap, to, to);\n\n  const nextStep = pathMap[to][1];\n  return getPath(pathMap, nextStep, `${nextStep}${accumulator}`);\n};\n","import React, { ReactNode, useRef } from 'react';\nimport { atom, selector } from 'recoil';\nimport { Atom, EdgeT } from '../../types';\nimport { Container } from './styles';\nimport { dijkstra, getPath } from './algorithm';\n\ninterface DijkstraProperties {\n  getLeft:     () => number;\n  getTop:      () => number;\n  toAtom?:     Atom;\n  vertices:    object;\n  edges:       Array<EdgeT>;\n  pathAtom?: Atom;\n}\n\nconst initialState: DijkstraProperties = {\n  getLeft:  () => 0,\n  getTop:   () => 0,\n  vertices: {},\n  edges:    []\n};\n\nexport const DijkstraContext = React.createContext(initialState);\n\ninterface PropTypes {\n  children:       ReactNode;\n  verticesConfig: object;\n  edgesConfig:    Array<{ from: string, to: string }>;\n}\n\nconst DijkstraProvider = ({ children, verticesConfig, edgesConfig }: PropTypes) => {\n  const containerRef = useRef({ offsetLeft: 0, offsetTop: 0 });\n  const getLeft = () => containerRef.current.offsetLeft;\n  const getTop  = () => containerRef.current.offsetTop;\n\n  const toAtom = atom({\n    key:     'vertex_to',\n    default: Object.keys(verticesConfig)[1]\n  });\n\n  const vertices =\n    Object.keys(verticesConfig)\n      .reduce((acc, k) => ({\n        ...acc,\n        [k]: atom({\n          key: `vertex_${k}`,\n          default: {\n            ...verticesConfig[k],\n            name: k\n          }\n        })\n      }), {});\n\n  const edges = edgesConfig.map(e => ({\n    from: vertices[e.from],\n    to:   vertices[e.to]\n  }));\n\n  const paths = selector({\n    key: 'paths',\n    get: ({ get }) => {\n      const vertexPositions =\n        Object.keys(vertices)\n          .reduce((acc, k) => ({\n            ...acc,\n            [k]: get(vertices[k])\n          }), {});\n\n      return dijkstra(vertexPositions, edgesConfig);\n    }\n  });\n\n  const pathAtom = selector({\n    key: 'active_path',\n    get: ({ get }) => getPath(get(paths), get(toAtom))\n  });\n\n  return (\n    <DijkstraContext.Provider value={{\n      getLeft,\n      getTop,\n      toAtom,\n      vertices,\n      edges,\n      pathAtom\n    }}>\n      <Container ref={containerRef}>\n        {children}\n      </Container>\n    </DijkstraContext.Provider>\n  );\n};\n\nexport default DijkstraProvider;\n","import styled, { css } from 'styled-components';\n\nconst SIZE = 50;\n\nexport const Node = styled.div`\n  background-color: #585858;\n  border-radius: 50%;\n  color: white;\n  cursor: pointer;\n  font-size: 18px;\n  height: ${SIZE}px;\n  line-height: 50px;\n  position: absolute;\n  text-align: center;\n  transform: translate(-50%, -50%);\n  user-select: none;\n  width:  ${SIZE}px;\n\n  ${props => props.fromSelected ? css`background-color: #53d853;` : ''}\n  ${props => props.toSelected ? css`background-color: #ff3c3c;` : ''}\n`;\n","import React, { useState, useRef, useContext } from 'react';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { Atom } from '../../types';\nimport { DijkstraContext } from '../Dijkstra';\nimport { Node } from './styles';\n\ninterface PropTypes {\n  vAtom:     Atom;\n  name:      string;\n  toAtom?:   Atom;\n}\n\nconst Vertex = ({ vAtom, name, toAtom }: PropTypes) => {\n  const { getLeft, getTop } = useContext(DijkstraContext);\n  const lastPosition = useRef({ x: 0, y: 0 });\n  const [isDragging, setIsDragging] = useState(false);\n\n  const [vectorState, setVectorState] = useRecoilState(vAtom);\n  const to   = useRecoilValue(toAtom);\n\n  const getMousePosition = (e: MouseEvent) => ({\n    x: e.clientX - getLeft(),\n    y: e.clientY - getTop()\n  });\n\n  const handleMouseDown = (e: MouseEvent) => {\n    lastPosition.current = getMousePosition(e);\n    setIsDragging(true);\n  };\n\n  const handleMouseUp = (e: MouseEvent) => {\n    setIsDragging(false);\n  };\n\n  const handleMouseMove = (e: MouseEvent) => {\n    if (isDragging) {\n      setVectorState({\n        ...getMousePosition(e),\n        name\n      });\n    }\n  };\n\n  return (\n    <Node\n      style={{ left: `${vectorState.x}px`, top: `${vectorState.y}px` }}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onMouseMove={handleMouseMove}\n      onClick={e => e.stopPropagation()}\n      fromSelected={name === 'A'}\n      toSelected={to === name}>{name}</Node>\n  );\n};\n\nexport default Vertex;\n","import React, { useContext } from 'react';\nimport { DijkstraContext } from '../Dijkstra';\nimport Vertex from './Vertex';\n\nconst Vertices = () => {\n  const { vertices, toAtom } = useContext(DijkstraContext);\n\n  return (\n    <>\n      {\n        Object.keys(vertices)\n          .map(k => (\n            <Vertex\n              key={k}\n              vAtom={vertices[k]}\n              name={k}\n              toAtom={toAtom} />\n          ))\n      }\n    </>\n  );\n};\n\nexport default Vertices;\n","export const get = (path: Array<string>) => (obj: object, defaultVal?: any) => {\n  if (!obj) return defaultVal;\n\n  const val  = obj[path[0]];\n  const rest = path.slice(1);\n\n  if (rest.length > 0)   return get(rest)(val, defaultVal);\n  return val;\n};\n\nexport const greater = (x: number, y: number): number => {\n  if (x > y) return x;\n  return y;\n};\n\nexport const lesser = (x: number, y: number): number => {\n  if (x < y) return x;\n  return y;\n};\n\nexport const xor = (pred1: boolean, pred2: boolean): boolean => {\n  if (pred1 && pred2) return false;\n  if (pred1 || pred2) return true;\n  return false;\n};\n\nexport const zip = (xs: Array<any>, ys: Array<any>): Array<[any, any]> => {\n  const [shorter, longer] = (() => {\n    if (xs.length < ys.length) return [xs, ys];\n    return [ys, xs];\n  })();\n\n  return shorter.map((x, i) => [x, longer[i]]);\n};\n\nexport const pairWith = (x: any) => (list: Array<any>): Array<[any, any]> =>\n  list.map(e => [x, e]);\n\nexport const flatten = (xs: Array<Array<any>>): Array<any> =>\n  xs.reduce((acc, x) => [...acc, ...x], []);\n\nexport const allCombinations = (chars: Array<string>): Array<[string, string]> =>\n  flatten(\n    chars.map(c => pairWith(c)(chars)));\n","import styled, { css } from 'styled-components';\n\nexport const Line = styled.div`\n  position: absolute;\n\n  ${props => {\n    const color = props.active ? '#4AABFF' : '#a5a5a5';\n    const size  = props.active ? 5 : 2;\n\n    if (props.backward) {\n      return css`\n        background: linear-gradient(to bottom right, rgba(0,0,0,0) calc(50% - ${size}px), ${color}, rgba(0,0,0,0) calc(50% + 2px))\n      `;\n    }\n\n    return css`\n      background: linear-gradient(to top right, rgba(0,0,0,0) calc(50% - ${size}px), ${color}, rgba(0,0,0,0) calc(50% + 2px));\n    `;\n  }}\n`;\n","import React, { useContext } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { Atom } from '../../types';\nimport { greater, lesser, xor } from '../../utils';\nimport { DijkstraContext } from '../Dijkstra';\nimport { Line } from './styles';\n\ninterface PropTypes {\n  from: Atom;\n  to:   Atom;\n}\n\nconst Edge = ({ from, to }: PropTypes) => {\n  const { pathAtom } = useContext(DijkstraContext);\n\n  const fromValue = useRecoilValue(from);\n  const toValue   = useRecoilValue(to);\n  const path      = useRecoilValue(pathAtom);\n\n  const active = path.includes(fromValue.name) && path.includes(toValue.name);\n\n  const left   = lesser(fromValue.x, toValue.x);\n  const top    = lesser(fromValue.y, toValue.y);\n  const width  = greater(fromValue.x, toValue.x) - left;\n  const height = greater(fromValue.y, toValue.y) - top;\n\n  return (\n    <Line\n      style={{ left, top, width, height }}\n      backward={xor(left === toValue.x, top === toValue.y)}\n      active={active} />\n  );\n};\n\nexport default Edge;\n","import React, { useContext } from 'react';\nimport { DijkstraContext } from '../Dijkstra';\nimport Edge from './Edge';\n\nconst Edges = () => {\n  const { edges } = useContext(DijkstraContext);\n\n  return (\n    <>\n      {\n        edges.map((e, i) => (\n          <Edge\n            key={i}\n            from={e.from}\n            to={e.to}/>\n        ))\n      }\n    </>\n  );\n};\n\nexport default Edges;\n","import styled, { css } from 'styled-components';\n\nexport const Button = styled.button`\n  background-color: #fff;\n  border: 1px solid #585858;\n  cursor: pointer;\n  margin: 10px 5px;\n\n  ${props => props.selected ? css`background-color: #4AABFF;` : ''}\n`;\n","import React from 'react';\nimport { Button } from './styles';\n\ntype Option = {\n  text:     string;\n  id:       string;\n  selected: boolean;\n};\n\ninterface PropTypes {\n  label:   string;\n  options: Array<Option>;\n  onChange: (string) => void;\n}\n\nconst Selector = ({ label, options, onChange }: PropTypes) => (\n  <div>\n    <span>{label}</span>\n    {\n      options.map(o => (\n        <Button\n          key={o.id}\n          onClick={() => onChange(o.id)}\n          selected={o.selected}>{o.text}</Button>\n      ))\n    }\n  </div>\n);\n\nexport default Selector;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.section`\n  align-items: center;\n  display: grid;\n  grid-template-columns: 2fr 4fr;\n`;\n\nexport const Text = styled.p`\n  margin: 0;\n`;\n","import React, { useContext } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { DijkstraContext } from '../Dijkstra';\nimport Selector from '../Selector';\nimport { Wrapper, Text } from './styles';\n\ninterface PropTypes {\n  options: Array<string>;\n}\n\nconst Controls = ({ options }) => {\n  const { toAtom } = useContext(DijkstraContext);\n  const [to, setTo]     = useRecoilState(toAtom);\n\n  const toOptions = options.map(o => ({\n    id:       o,\n    text:     o,\n    selected: o === to\n  }))\n\n  return (\n    <Wrapper>\n      <Selector\n        label=\"To:\"\n        options={toOptions}\n        onChange={setTo} />\n      <Text>Try moving the vertices. The blue line indicates the shortest route from A to the selected vertex.</Text>\n    </Wrapper>\n  );\n};\n\nexport default Controls;\n","import React from 'react';\nimport './App.css';\nimport { RecoilRoot } from 'recoil';\nimport DijkstraProvider from './components/Dijkstra';\nimport Vertices from './components/Vertices';\nimport Edges from './components/Edges';\nimport Controls from './components/Controls';\n\nconst vertices = {\n  A: { x: 150, y: 750 },\n  B: { x: 340, y: 100 },\n  C: { x: 530, y: 270 },\n  D: { x: 710, y: 660 },\n  E: { x: 410, y: 720 },\n  F: { x: 500, y: 150 }\n};\n\nconst edges = [\n  { from: 'A', to: 'C' },\n  { from: 'B', to: 'C' },\n  { from: 'B', to: 'D' },\n  { from: 'C', to: 'D' },\n  { from: 'A', to: 'E' },\n  { from: 'D', to: 'E' },\n  { from: 'C', to: 'F' },\n  { from: 'B', to: 'F' }\n];\n\nconst App = () => (\n  <div className=\"App\">\n    <RecoilRoot>\n      <DijkstraProvider\n        verticesConfig={vertices}\n        edgesConfig={edges}>\n        <Edges />\n        <Vertices />\n        <Controls options={Object.keys(vertices)} />\n      </DijkstraProvider>\n    </RecoilRoot>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}